from tkinter import *
from tkinter import filedialog
from tkinter import messagebox
import cv2
import numpy as np

filename = ''
way = ''
key2 = 0x0
count = 0x0
#key  0x1123456789abcdef1123456789abcdef
#count   0x16546984454644651321231566adfebc
class AES:
    
    def __init__(self):
        # 16字节转数字
        def bytestonum(self, _16bytes):
            return int.from_bytes(_16bytes, byteorder='big')

        # 数字转16字节
        def numtobytes(self, num):
            return num.to_bytes(16, byteorder='big')
        self.SBOX = [[0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
                [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
                [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
                [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
                [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
                [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
                [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
                [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
                [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
                [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
                [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
                [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
                [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
                [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
                [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
                [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]]

        self.ISBOX = [[0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB],
                 [0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB],
                 [0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E],
                 [0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25],
                 [0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92],
                 [0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84],
                 [0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06],
                 [0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B],
                 [0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73],
                 [0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E],
                 [0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B],
                 [0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4],
                 [0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F],
                 [0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF],
                 [0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61],
                 [0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D]]
        self.RX = [0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,
            0x20000000, 0x40000000, 0x80000000, 0x1B000000, 0x36000000]
        self.IX = [[0xe, 0xb, 0xd, 0x9], [0x9, 0xe, 0xb, 0xd], [0xd, 0x9, 0xe, 0xb], [0xb, 0xd, 0x9, 0xe]]
        self.T0 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd,
              0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d,
              0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d,
              0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b,
              0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7,
              0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a,
              0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4,
              0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f,
              0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1,
              0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d,
              0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e,
              0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb,
              0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e,
              0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c,
              0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46,
              0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a,
              0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7,
              0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81,
              0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe,
              0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504,
              0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a,
              0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f,
              0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2,
              0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395,
              0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e,
              0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c,
              0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256,
              0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4,
              0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4,
              0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7,
              0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa,
              0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818,
              0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1,
              0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21,
              0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42,
              0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12,
              0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158,
              0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133,
              0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22,
              0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a,
              0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631,
              0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11,
              0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a]
        self.T1 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072,
              50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938,
              1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202,
              3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398,
              1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929,
              1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806,
              252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098,
              2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112,
              4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227,
              1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910,
              1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291,
              3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160,
              1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645,
              1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083,
              1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879,
              1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144,
              2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686,
              3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930,
              504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098,
              2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013,
              1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810,
              3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884,
              1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234,
              2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121,
              1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800,
              3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487,
              550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245,
              3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008,
              4238890068, 3597515707, 975967766]
        self.T2 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872,
               16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298,
               3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082,
               2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518,
               911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169,
               3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926,
               84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018,
               1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552,
               1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827,
               3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910,
               961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931,
               1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960,
               1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285,
               944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003,
               3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319,
               3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744,
               2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566,
               3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090,
               169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418,
               2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893,
               3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050,
               2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164,
               3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074,
               1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081,
               895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160,
               2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927,
               3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805,
               3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488,
               1425844308, 3151392187, 372911126]
        self.T3 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672,
               16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983,
               3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687,
               2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788,
               909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834,
               3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071,
               84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463,
               1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667,
               1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302,
               3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535,
               960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621,
               1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760,
               1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225,
               943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573,
               3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934,
               3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344,
               2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671,
               3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700,
               168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388,
               2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873,
               3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340,
               2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419,
               3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839,
               1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866,
               892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595,
               2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917,
               3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690,
               3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443,
               1414855848, 3149649517, 370555436]

        self.T4 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1,
              0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25,
              0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67,
              0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6,
              0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3,
              0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd,
              0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182,
              0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94,
              0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2,
              0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5,
              0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492,
              0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a,
              0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa,
              0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46,
              0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997,
              0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb,
              0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48,
              0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927,
              0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f,
              0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16,
              0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad,
              0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd,
              0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc,
              0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120,
              0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3,
              0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422,
              0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1,
              0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4,
              0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8,
              0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3,
              0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4,
              0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6,
              0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331,
              0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815,
              0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d,
              0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f,
              0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252,
              0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89,
              0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f,
              0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86,
              0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c,
              0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190,
              0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742]
        self.T41 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050,
               4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723,
               2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162,
               3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113,
               3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975,
               2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122,
               1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122,
               1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614,
               2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602,
               1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937,
               3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0,
               2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017,
               560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336,
               1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840,
               3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390,
               1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268,
               4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489,
               4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778,
               915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518,
               3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129,
               2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846,
               136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884,
               3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846,
               2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314,
               1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060,
               2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326,
               3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296,
               1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980,
               1893020342, 1950903388, 1120974935]

        self.T42 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800,
               1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698,
               244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317,
               1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239000, 1910319033,
               1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180,
               2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827,
               2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107,
               2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174,
               1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177,
               104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237,
               1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0,
               2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047,
               2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796,
               1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150,
               2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635,
               695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898,
               1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344,
               1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178,
               188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278,
               331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044,
               2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991,
               3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549,
               1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361,
               3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974,
               895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225,
               344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516,
               935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571,
               3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195,
               3060847922, 1551124588, 1463996600]

        self.T43 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160,
               1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053,
               3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287,
               1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143,
               3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905,
               1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242,
               529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998000, 3215307299, 57326082,
               377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524,
               777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902,
               3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582,
               1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0,
               2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162,
               1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241,
               2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765,
               514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155,
               1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413,
               3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689,
               2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628,
               3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908,
               2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464,
               410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786,
               3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454,
               2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231,
               1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909,
               2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495,
               4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736,
               3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026,
               499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555,
               850817237, 1817998408, 3092726480]
        self.a1 = 0
        self.c1 = 0
    # 字节替换
    def changebytes(self, s):    # 字节代换
        result = []
        for m in s:
            i = m >> 4
            j = m & 0xf
            s = self.SBOX[i][j]
            result.append(s)
        return result

    def ichangebytes(self, s):
        result = []
        for m in s:
            i = m >> 4
            j = m & 0xf
            s = self.ISBOX[i][j]
            result.append(s)
        return result

    # 行移位
    def moverow(self, S):
        return [S[0], S[5], S[10], S[15],
                S[4], S[9], S[14], S[3],
                S[8], S[13], S[2], S[7],
                S[12], S[1], S[6], S[11]]

    def imoverow(self, S):
        return [S[0], S[13], S[10], S[7],
                S[4], S[1], S[14], S[11],
                S[8], S[5], S[2], S[15],
                S[12], S[9], S[6], S[3]]

    def bytemove(self, _4byte_key):
        return ((_4byte_key & 0xffffff) << 8) + (_4byte_key >> 24)

    def ichange(self,roundkey):
        result=bytearray([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])
        for i in range(4):
            tmp0 = roundkey[4*i+0]
            tmp1 =roundkey[4*i+1]
            tmp2 = roundkey[4*i+2]
            tmp3 = roundkey[4*i+3]
            result[4*i+0] = self.select(tmp0, 14) ^ self.select(tmp1, 11) ^ self.select(tmp2, 13) ^ self.select(tmp3, 9)
            result[4*i+1] = self.select(tmp0, 9) ^ self.select(tmp1, 14) ^ self.select(tmp2, 11) ^ self.select(tmp3, 13)
            result[4*i+2] = self.select(tmp0, 13) ^ self.select(tmp1, 9) ^ self.select(tmp2, 14) ^ self.select(tmp3, 11)
            result[4*i+3] = self.select(tmp0, 11) ^ self.select(tmp1, 13) ^ self.select(tmp2, 9) ^ self.select(tmp3, 14)
        return result

    def select(self,a,b):
        result = 0
        while (b != 0):
            if (b & 1):
                result = result ^ a
            a <<= 1
            if ((a >> 8) & 1):
                a = a ^ 0x11b
            b >>= 1
        return result

    def keysub(self, _4byte_key):
        result = 0
        for position in range(4):
            i = _4byte_key >> position * 8 + 4 & 0xf
            j = _4byte_key >> position * 8 & 0xf
            result ^= self.SBOX[i][j] << position * 8
        return result

    def roundkey(self, _16bytes_key):
        w = [_16bytes_key >> 96, _16bytes_key >> 64 & 0xFFFFFFFF, _16bytes_key >> 32 & 0xFFFFFFFF,
             _16bytes_key & 0xFFFFFFFF] + [0] * 40
        for i in range(4, 44):
            t = w[i - 1]
            if not i % 4:
                t = self.keysub(self.bytemove(t)) ^ self.RX[i // 4 - 1]
            w[i] = w[i - 4] ^ t
        return [self.numtobytes(
            sum([w[4 * i] << 96, w[4 * i + 1] << 64,
                 w[4 * i + 2] << 32, w[4 * i + 3]])
        ) for i in range(11)]

    def iroundkey(self, _16bytes_key):
        w = [_16bytes_key >> 96, _16bytes_key >> 64 & 0xFFFFFFFF, _16bytes_key >> 32 & 0xFFFFFFFF,
             _16bytes_key & 0xFFFFFFFF] + [0] * 40
        for i in range(4, 44):
            t = w[i - 1]
            if not i % 4:
                t = self.keysub(self.bytemove(t)) ^ self.RX[i // 4 - 1]
            w[i] = w[i - 4] ^ t
        roundkey = [self.numtobytes(
            sum([w[4 * i] << 96, w[4 * i + 1] << 64,
                 w[4 * i + 2] << 32, w[4 * i + 3]])
        ) for i in range(11)]
        for i in range(1, 10):
            roundkey[i] = self.ichange(roundkey[i])
        return roundkey

    def AddRoundKey(self, s, RoundKeys, index):
        return self.bytes_or(s, RoundKeys[index])

    def bytes_or(self, bytes_1, bytes_2):
        s=[b'/x00']*16
        for i in range(16):
            result=(bytes_1[i]^bytes_2[i])
            s[i]=result
        return s

    def colchange(self, te, s, te1, T2, T3):
        t = [0] * 4
        result = [0] * 16
        t[0] = te[s[0]] ^ te1[s[5]] ^ T2[s[10]] ^ T3[s[15]]
        t[1] = te[s[4]] ^ te1[s[9]] ^ T2[s[14]] ^ T3[s[3]]
        t[2] = te[s[8]] ^ te1[s[13]] ^ T2[s[2]] ^ T3[s[7]]
        t[3] = te[s[12]] ^ te1[s[1]] ^ T2[s[6]] ^ T3[s[11]]
        for i in range(4):
            result[4 * i] = t[i] >> 24
            result[4 * i + 1] = (t[i] >> 16) & 0xff
            result[4 * i + 2] = (t[i] >> 8) & 0xff
            result[4 * i + 3] = t[i] & 0xff
        return result

    def icolchange(self, T4, s, T41, T42, T43):
        t = [0] * 4
        result = [0] * 16
        t[0] = T4[s[0]] ^ T41[s[13]] ^ T42[s[10]] ^ T43[s[7]]
        t[1] = T4[s[4]] ^ T41[s[1]] ^ T42[s[14]] ^ T43[s[11]]
        t[2] = T4[s[8]] ^ T41[s[5]] ^ T42[s[2]] ^ T43[s[15]]
        t[3] = T4[s[12]] ^ T41[s[9]] ^ T42[s[6]] ^ T43[s[3]]
        for i in range(4):
            result[4 * i] = t[i] >> 24
            result[4 * i + 1] = (t[i] >> 16) & 0xff
            result[4 * i + 2] = (t[i] >> 8) & 0xff
            result[4 * i + 3] = t[i] & 0xff
        return result

    def e_EBC1(self, m, roundkeys):
        result = []
        for i in range(int(self.a1 * self.c1 / 16)):
            s = m[(16 * i):(16 + 16 * i)]
            s =self.AddRoundKey(s, roundkeys, 0)
            for round in range(1, 10):
                s = self.colchange(self.T0, s, self.T1, self.T2, self.T3)
                s = self.AddRoundKey(s, roundkeys, round)
            s = self.changebytes(s)
            s = self.moverow(s)
            s = self.AddRoundKey(s, roundkeys, 10)
            result[16*i:16*i+16]=s
        return result

    def d_EBC1(self, c, roundkeys):
        result = []
        for i in range(int(self.a1 * self.c1 / 16)):
            s = c[(16 * i):(16 + 16 * i)]
            s =self.AddRoundKey(s, roundkeys, 10)
            for round in range(1, 10):
                s = self.icolchange(self.T4, s, self.T41, self.T42, self.T43)
                s = self.AddRoundKey(s, roundkeys, 10 - round)
            s = self.imoverow(s)
            s = self.ichangebytes(s)
            s = self.AddRoundKey(s, roundkeys, 0)
            result[16*i:16*i+16]=s
        return result

    def e_CTR1(self,m,roundkeys,count):
        result = []
        for i in range(int(self.a1 * self.c1 / 16)):
            s = count+i
            s=s.to_bytes(16,byteorder='big')
            s = self.AddRoundKey(s, roundkeys, 0)
            for round in range(1, 10):
                s = self.colchange(self.T0, s, self.T1, self.T2, self.T3)
                s = self.AddRoundKey(s, roundkeys, round)
            s = self.changebytes(s)
            s = self.moverow(s)
            s = self.AddRoundKey(s, roundkeys, 10)
            result[16 * i:16 * i + 16] = self.bytes_or(s,m[16*i:16*i+16])
        return result
    def d_CTR1(self,c,roundkeys,count):
        result = []
        for i in range(int(self.a1 * self.c1 / 16)):
            s=count+i
            s = s.to_bytes(16, byteorder='big')
            s = self.AddRoundKey(s, roundkeys, 0)
            for round in range(1, 10):
                s = self.colchange(self.T0, s, self.T1, self.T2, self.T3)
                s = self.AddRoundKey(s, roundkeys, round)
            s = self.changebytes(s)
            s = self.moverow(s)
            s = self.AddRoundKey(s, roundkeys, 10)
            result[16 * i:16 * i + 16] = self.bytes_or(s,c[16*i:16*i+16])
        return result
    
    def E_aes(self,filebmp,roundkey,mode):
        c1 = np.ones((self.a1, self.c1, 3))
        b = [0] * self.a1 * self.c1
        g = [0] * self.a1 * self.c1
        r = [0] * self.a1 * self.c1
        for i in range(self.a1):
            for j in range(self.c1):
                b[i * self.a1 + j] = filebmp[i][j][0]
                g[i * self.a1 + j] = filebmp[i][j][1]
                r[i * self.a1 + j] = filebmp[i][j][2]
        b = np.array(b)
        b = b.tobytes()
        g = np.array(g)
        g = g.tobytes()
        r = np.array(r)
        r = r.tobytes()
        if mode =='ECB':
            b1 = self.e_EBC1(b, roundkey)
            g1 = self.e_EBC1(g, roundkey)
            r1 = self.e_EBC1(r, roundkey)
        else:
            b1 = self.e_CTR1(b, roundkey,count)
            g1 = self.e_CTR1(g, roundkey,count)
            r1 = self.e_CTR1(r, roundkey,count)
        for i in range(self.a1):
            for j in range(self.c1):
                c1[i][j][0] = b1[i * self.a1 + j]
                c1[i][j][1] = g1[i * self.a1 + j]
                c1[i][j][2] = r1[i * self.a1 + j]
        cv2.imwrite("AESencry.bmp", c1)

    def D_aes(self, filebmp, roundkey, mode,count):
        c1 = np.ones((self.a1, self.c1, 3))
        b = [0] * self.a1 * self.c1
        g = [0] * self.a1 * self.c1
        r = [0] * self.a1 * self.c1
        for i in range(self.a1):
            for j in range(self.c1):
                b[i * self.a1 + j] = filebmp[i][j][0]
                g[i * self.a1 + j] = filebmp[i][j][1]
                r[i * self.a1 + j] = filebmp[i][j][2]
        b = np.array(b)
        b = b.tobytes()
        g = np.array(g)
        g = g.tobytes()
        r = np.array(r)
        r = r.tobytes()
        if mode == 'ECB':
            b1 = self.d_EBC1(b, roundkey)
            g1 = self.d_EBC1(g, roundkey)
            r1 = self.d_EBC1(r, roundkey)
        else:
            b1 = self.d_CTR1(b, roundkey,count)
            g1 = self.d_CTR1(g, roundkey,count)
            r1 = self.d_CTR1(r, roundkey,count)
        for i in range(self.a1):
            for j in range(self.c1):
                c1[i][j][0] = b1[i * self.a1 + j]
                c1[i][j][1] = g1[i * self.a1 + j]
                c1[i][j][2] = r1[i * self.a1 + j]
        cv2.imwrite("AESdecry.bmp", c1)

AES0 = AES()
window = Tk()
window.title("AES加密解密工具")
window.geometry('400x220')
t0 = Label(window, text = "文件地址",font=('黑体', 10),wraplength=30)
t0.place(x=10, y=40)
t1 = Text(window, bg='white', font=('黑体', 10),padx=2, pady=2, borderwidth=2,relief="sunken")
t1.place(x=50, y=40, width=340, height=50)
t2 = Label(window, borderwidth=3, relief="ridge")
t2.place(x=10, y=100, width=380, height=100)
t3 = Label(window, text = "模式选择", font=('黑体', 10,'bold'))
t3.place(x=30, y=90)
def openfile():
    global filename
    filename = filedialog.askopenfilename()
    t1.insert(INSERT, f"{filename}")

def getkey():
    key = keyentry.get()
    key1 = int(key, 16)
    print(key1)
    key2 = hex(key1)
    print(key2)
def getcount():
    count0 = countentry.get()
    count1 = int(count0, 16)
    print(count1)
    count2 = hex(count1)
    print(count2)

def E_AES():
    AES0 = AES()
    roundkey = AES0.roundkey(key2)
    filebmp = cv2.imread(filename)
    print(filename)
    shape = filebmp.shape
    AES0.a1 = shape[0]
    AES0.c1 = shape[1]
    AES0.E_aes(filebmp, roundkey, way)
    messagebox.showinfo(title='Encry', message='加密成功！')
    print("success0")

def D_AES():
    global count
    AES0 = AES()
    roundkey = AES0.roundkey(key2)
    iroundkey = AES0.iroundkey(key2)
    filebmp = cv2.imread(filename)
    print(filename)
    shape = filebmp.shape
    AES0.a1 = shape[0]
    AES0.c1 = shape[1]
    filebmp = cv2.imread("AESencry.bmp")
    print(way)
    if way == 'ECB':
        AES0.D_aes(filebmp, iroundkey, way,count)
    elif way == 'CTR':
        AES0.D_aes(filebmp, roundkey, way,count)
    messagebox.showinfo(title='Decry', message='解密成功！')

def wayget():
    global way
    way = method.get()

menubar = Menu(window)# 菜单一
filemenu = Menu(menubar, tearoff=0)# 一级菜单
menubar.add_cascade(label='File', menu=filemenu)# 二级菜单
filemenu.add_command(label='Open',command = openfile)
editmenu = Menu(menubar, tearoff=0)# 一级菜单
menubar.add_cascade(label='Exit', menu=editmenu)# 二级菜单
editmenu.add_command(label='Exit', command=window.quit)
window.config(menu=menubar)

tx = Label(window, text=f"密钥", font=('黑体', 10), wraplength=100)
tx.place(x=10, y=10)
keyentry = Entry(window, bg="white", font=('黑体', 10), bd=0, borderwidth=2, relief="sunken")
keyentry.place(x=50, y=10, width=200, height=20)
keyget = Button(window, text='确定', bg='white',font=('黑体', 10,), command=getkey)
keyget.place(x=260, y=10, width=40, height=20)
counttx = Label(window, text=f"CTR count", font=('黑体', 10))
counttx.place(x=120, y=110)
countentry = Entry(window, bg="white", font=('黑体', 10), bd=0, borderwidth=2, relief="sunken")
countentry.place(x=100, y=130, width=230, height=20)
countget = Button(window, text='确定', bg='white',font=('黑体', 10,), command=getcount)
countget.place(x=340, y=130, width=40, height=20)
#var1 = IntVar()  # 定义var1和var2整型变量用来存放选择行为返回值
#var2 = IntVar()
#c1 = Checkbutton(window, text='ECB', variable=var1, onvalue=1, offvalue=0,command=print_selection)  # 传值原理类似于radiobutton部件
#c1.place(x=10, y=50)
#c2 = Checkbutton(window, text='CRT', variable=var2, onvalue=1, offvalue=0, command=print_selection)
#c2.place(x=10, y=65)
method = StringVar()
r1 = Radiobutton(window, text='ECB', variable=method, value='ECB',command = wayget)
r1.place(x=20, y=110)
r2 = Radiobutton(window, text='CTR', variable=method, value='CTR',command = wayget)
r2.place(x=20, y=130)
button1 = Button(window, text='加密', bg='white',font=('黑体', 12,),command = lambda:E_AES())
button1.place(x=100, y=160 , width=60, height=30)
button2 = Button(window, text='解密', bg='white',font=('黑体', 12,),command = lambda:D_AES())
button2.place(x=250, y=160 , width=60, height=30)
window.mainloop()

